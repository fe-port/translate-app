{"version":3,"sources":["configs/constants.ts","provider/data.tsx","layout/DefaultLayout.tsx","utils/zip.ts","components/FixedFooter.tsx","components/EditableTranslate.tsx","components/MainContent.tsx","App.tsx","index.tsx"],"names":["EN_LANG","defaultGlobalData","hideTranslatedPanel","hideTranslatedLocales","visibleLang","locales","GlobalDataContext","createContext","langs","noEnLangs","setConfig","GlobalDataProvider","props","useState","globalData","setGlobalData","map","item","filename","Provider","value","filter","lang","key","children","useGlobalData","useContext","DefaultLayout","className","parseZip","file","a","JsZip","loadAsync","zip","ret","Object","keys","files","fileKey","localeFile","dir","async","localeContent","push","name","split","pop","replace","content","console","error","message","FixedFooter","onExport","rootRef","useRef","onSelectZipFile","useCallback","log","length","ref","onChange","v","style","width","getPopupContainer","current","Option","checked","e","target","type","onClick","accept","beforeUpload","showUploadList","EditableTranslate","inputVisible","setInputVisible","handleChange","Panel","changedValues","Map","shouldPanelDefaultCollapsed","panel","every","MainContent","actionRef","enLocale","find","locale","enJson","JSON","parse","localeJsons","reduce","obj","panels","arr","hash","description","defaultMessage","defaultActiveKeys","exportZip","forEach","langFolder","folder","newJson","sort","b","stringify","generateAsync","then","eleLink","document","createElement","download","display","href","URL","createObjectURL","body","appendChild","click","removeChild","downloadZip","defaultActiveKey","header","set","handleInputChange","TranslatePage","mainContentRef","minHeight","paddingBottom","ReactDOM","render","App","getElementById"],"mappings":"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","file":"static/js/main.02a4eab9.chunk.js","sourcesContent":["export const EN_LANG = 'en-US'","import React, { createContext, useContext, useState } from 'react'\nimport { EN_LANG } from 'src/configs/constants'\nimport { LocaleFileContent } from '../types'\n\ninterface GlobalData {\n  // 隐藏已翻译面板\n  hideTranslatedPanel: boolean\n  // 隐藏已翻译的配置\n  hideTranslatedLocales: boolean\n  // 显示的翻译语言\n  visibleLang: string\n  // 语言列表\n  locales: LocaleFileContent[]\n}\n\ninterface GlobalDataWithAction extends GlobalData {\n  langs: string[]\n  noEnLangs: string[]\n  setConfig: (key: keyof GlobalData, value: boolean | string | LocaleFileContent[]) => void\n}\n\nconst defaultGlobalData = {\n  hideTranslatedPanel: false,\n  hideTranslatedLocales: false,\n  visibleLang: '',\n  locales: []\n}\n\nconst GlobalDataContext = createContext<GlobalDataWithAction>({\n  ...defaultGlobalData,\n  langs: [],\n  noEnLangs: [],\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  setConfig: () => {}\n})\n\nconst GlobalDataProvider: React.FC = props => {\n  const [globalData, setGlobalData] = useState(defaultGlobalData)\n  const langs = globalData.locales.map(item => item.filename)\n  return (\n    <GlobalDataContext.Provider\n      value={{\n        ...globalData,\n        langs,\n        noEnLangs: langs.filter(lang => lang !== EN_LANG),\n        setConfig: (key, value) => {\n          setGlobalData({\n            ...globalData,\n            [key]: value\n          })\n        }\n      }}\n    >\n      {props.children}\n    </GlobalDataContext.Provider>\n  )\n}\n\nexport default GlobalDataProvider\n\nexport function useGlobalData() {\n  return useContext(GlobalDataContext)\n}\n","import React from 'react'\nimport FilterConfigProvider from '../provider/data'\n\ninterface Props {}\n\nconst DefaultLayout: React.FC<Props> = ({ children }) => {\n  return (\n    <main>\n      <h1 className=\"py-4 text-center text-2xl\">在线翻译</h1>\n      <FilterConfigProvider>\n        <div className=\"app-container \">\n          {children}\n        </div>\n      </FilterConfigProvider>\n    </main>\n  )\n}\n\nexport default DefaultLayout\n","import { message } from 'antd'\nimport JsZip from 'jszip'\nimport { LocaleFileContent, LocaleTranslates } from '../types'\n\nexport async function parseZip(file: File): Promise<LocaleFileContent[]> {\n  try {\n    const zip = await JsZip.loadAsync(file)\n    const ret: LocaleFileContent[] = []\n    for (const fileKey of Object.keys(zip.files)) {\n      const localeFile = zip.files[fileKey]\n      // 目录跳过\n      if (!localeFile.dir) {\n        const localeContent = await localeFile.async('string')\n        ret.push({\n          filename: localeFile.name.split('/').pop().replace(/\\.json/, ''),\n          content: localeContent\n        })\n      }\n    }\n    return ret\n  } catch (error) {\n    console.error(error)\n    message.error('zip文件读取失败')\n  }\n  return []\n}\n\nexport function downloadZip(noEnLangs: string[], localeJsons: {\n  [key: string]: LocaleTranslates\n}) {\n  const zip = new JsZip()\n  const langFolder = zip.folder('lang')\n  noEnLangs.forEach(lang => {\n    // json重新排序\n    const newJson = Object.keys(localeJsons[lang])\n      .sort((a, b) => (a < b ? -1 : 1))\n      .reduce<LocaleTranslates>((obj, key) => {\n        obj[key] = localeJsons[lang][key]\n        return obj\n      }, {})\n    langFolder.file(`${lang}.json`, JSON.stringify(newJson, null, 2))\n  })\n  // 把打包内容异步转成blob二进制格式\n  zip.generateAsync({ type: 'blob' }).then(function (content) {\n    // 下载的文件名\n    const filename = 'translate.zip'\n    // 创建隐藏的可下载链接\n    const eleLink = document.createElement('a')\n    eleLink.download = filename\n    eleLink.style.display = 'none'\n    // 下载内容转变成blob地址\n    eleLink.href = URL.createObjectURL(content)\n    // 触发点击\n    document.body.appendChild(eleLink)\n    eleLink.click()\n    // 然后移除\n    document.body.removeChild(eleLink)\n  })\n}","import { Button, Checkbox, Select, Upload } from 'antd'\nimport React, { useCallback, useRef } from 'react'\nimport { useGlobalData } from '../provider/data'\nimport { parseZip } from '../utils/zip'\n\ninterface Props {\n  langs: string[]\n  onExport: () => void\n}\n\nconst FixedFooter: React.FC<Props> = ({ langs, onExport }) => {\n  const rootRef = useRef(null)\n  const {\n    hideTranslatedPanel,\n    hideTranslatedLocales,\n    visibleLang,\n    setConfig,\n    locales\n  } = useGlobalData()\n\n  const onSelectZipFile = useCallback(\n    async ({ file }) => {\n      const locales = await parseZip(file)\n      console.log(locales.length)\n      setConfig('locales', locales)\n    },\n    [setConfig]\n  )\n\n  return (\n    <div className=\"fixed bottom-0 left-0 right-0\" ref={rootRef}>\n      <div className=\"p-4 flex items-center app-container up-shadow\">\n        <div className=\"flex items-center mr-6\">\n          <label>显示翻译语言：</label>\n          <Select\n            value={visibleLang}\n            onChange={v => setConfig('visibleLang', v)}\n            style={{ width: '120px' }}\n            getPopupContainer={() => rootRef.current!}\n          >\n            <Select.Option value=\"\">全部</Select.Option>\n            {langs.map(lang => (\n              <Select.Option key={lang} value={lang}>\n                {lang}\n              </Select.Option>\n            ))}\n          </Select>\n        </div>\n        <Checkbox\n          checked={hideTranslatedPanel}\n          onChange={e => setConfig('hideTranslatedPanel', e.target.checked)}\n        >\n          隐藏已翻译面板\n        </Checkbox>\n        <Checkbox\n          checked={hideTranslatedLocales}\n          onChange={e => setConfig('hideTranslatedLocales', e.target.checked)}\n        >\n          隐藏已翻译语言\n        </Checkbox>\n        {locales.length ? (\n          <Button className=\"ml-auto\" type=\"primary\" onClick={onExport}>\n            导出\n          </Button>\n        ) : (\n          <Upload\n            className=\"ml-auto\"\n            accept=\".zip\"\n            beforeUpload={() => false}\n            showUploadList={false}\n            onChange={onSelectZipFile}\n          >\n            <Button type=\"primary\">选择zip文件上传</Button>\n          </Upload>\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default FixedFooter\n","import React, { useCallback, useState } from 'react'\n\ninterface Props {\n  value: string\n  onChange?: (v: string) => void\n}\n\nconst EditableTranslate: React.FC<Props> = ({ value, onChange }) => {\n  const [inputVisible, setInputVisible] = useState(!value)\n  const handleChange = useCallback(\n    e => {\n      onChange?.(e.target.value)\n    },\n    [onChange]\n  )\n  return !inputVisible ? (\n    <span onClick={() => setInputVisible(true)}>{value}</span>\n  ) : (\n    <input className=\"w-full border-b focus:border-blue-500 appearance-none focus:outline-none\"\n      value={value}\n      onChange={handleChange}\n    />\n  )\n}\n\nexport default EditableTranslate\n","import React from 'react'\nimport { Collapse } from 'antd'\nimport EditableTranslate from './EditableTranslate'\nimport { useGlobalData } from '../provider/data'\nimport { LocaleTranslateItem } from '../types'\nimport { EN_LANG } from '../configs/constants'\nimport { downloadZip } from 'src/utils/zip'\n\nconst { Panel } = Collapse\ninterface LocaleTranslates {\n  [key: string]: LocaleTranslateItem\n}\ninterface LangPanelProps {\n  description: string\n  hash: string\n  langs: string[]\n  locales: { [key: string]: string }\n}\n\nexport interface MainContentAction {\n  exportZip: () => void\n}\n\nconst changedValues: Map<\n  {\n    lang: string\n    hash: string\n  },\n  string\n> = new Map()\n\nfunction shouldPanelDefaultCollapsed(\n  panel: LangPanelProps,\n  visibleLang?: string\n) {\n  return panel.langs.every(\n    lang => (visibleLang && lang !== visibleLang) || panel.locales[lang]\n  )\n}\n\nconst MainContent: React.FC<{ actionRef: React.MutableRefObject<MainContentAction>}> = ({ actionRef }) => {\n  const {\n    hideTranslatedPanel,\n    hideTranslatedLocales,\n    visibleLang,\n    locales,\n    langs,\n    noEnLangs\n  } = useGlobalData()\n\n  console.log('locales', locales)\n\n  // 没有配置\n  if (!locales.length) {\n    return (\n      <p className=\"text-blue-600 empty-content\">\n        暂无国际化配置，请使用导入按钮导入zip文件\n      </p>\n    )\n  }\n  // 读取英文翻译\n  const enLocale = locales.find(locale => locale.filename === EN_LANG)\n  // 解析英文中的所有hash数据\n  let enJson: LocaleTranslates = {}\n  try {\n    enJson = JSON.parse(enLocale.content) as LocaleTranslates\n  } catch (error) {\n    console.error(error)\n    return (\n      <p className=\"text-red-600 empty-content\">\n        解析英文源文件失败，请检查上传的zip文件是否正确!\n      </p>\n    )\n  }\n\n  try {\n    // locales数组转json map\n    const localeJsons = locales.reduce<{\n      [key: string]: LocaleTranslates\n    }>((obj, locale) => {\n      obj[locale.filename] = JSON.parse(locale.content) as LocaleTranslates\n      return obj\n    }, {})\n\n    // 面板数据\n    const panels = Object.keys(enJson).reduce<LangPanelProps[]>((arr, hash) => {\n      const panel = {\n        description: enJson[hash].description,\n        hash,\n        langs: noEnLangs,\n        locales: langs.reduce<{ [key: string]: string }>((obj, lang) => {\n          obj[lang] = localeJsons[lang][hash]?.defaultMessage\n          return obj\n        }, {})\n      }\n      if (\n        !(\n          hideTranslatedPanel && shouldPanelDefaultCollapsed(panel, visibleLang)\n        )\n      ) {\n        arr.push(panel)\n      }\n      return arr\n    }, [])\n\n    // 如果所有语言都有翻译，则默认收起\n    const defaultActiveKeys = panels.reduce<string[]>((arr, panel) => {\n      if (!shouldPanelDefaultCollapsed(panel)) {\n        arr.push(panel.hash)\n      }\n      return arr\n    }, [])\n\n    // 输入框内容变化\n    const handleInputChange = (v: string, lang: string, hash: string) => {\n      changedValues.set(\n        {\n          lang,\n          hash\n        },\n        v\n      )\n    }\n\n    // 赋值导出函数\n    if (actionRef) {\n      actionRef.current = {\n        exportZip: () => {\n          // 更新localeJsons\n          changedValues.forEach((value, key) => {\n            // 可能不存在该key\n            if (!localeJsons[key.lang][key.hash]) {\n              localeJsons[key.lang][key.hash] = {\n                defaultMessage: '',\n                description: enJson[key.hash].description\n              }\n            }\n            localeJsons[key.lang][key.hash].defaultMessage = value\n          })\n          downloadZip(noEnLangs, localeJsons)\n        }\n      }\n    }\n\n    return (\n      <Collapse defaultActiveKey={defaultActiveKeys}>\n        {panels.map(panel => (\n          <Panel\n            header={\n              panel.description || (\n                <span className=\"text-red-600 empty-content\">未提供描述</span>\n              )\n            }\n            key={panel.hash}\n          >\n            <div>\n              <p className=\"translate-item\">\n                <span className=\"translate-item-label\">en_US:</span>\n                <span className=\"translate-item-value\">{panel.locales[EN_LANG]}</span>\n              </p>\n              {panel.langs.map(lang => {\n                if (\n                  !(hideTranslatedLocales && panel.locales[lang]) &&\n                  !(visibleLang && lang !== visibleLang)\n                ) {\n                  return (\n                    <p  className=\"translate-item\" key={lang}>\n                      <span className=\"translate-item-label\">{lang}:</span>\n                      <span className=\"translate-item-value\">\n                        <EditableTranslate\n                          value={panel.locales[lang]}\n                          onChange={v => handleInputChange(v, lang, panel.hash)}\n                        />\n                      </span>\n                    </p>\n                  )\n                }\n                return null\n              })}\n            </div>\n          </Panel>\n        ))}\n      </Collapse>\n    )\n  } catch (e) {\n    console.error(e)\n    return (\n      <p className=\"text-red-600 empty-content\">\n        解析文件失败，请检查上传的zip文件是否正确!\n      </p>\n    )\n  }\n}\n\nexport default MainContent\n","import React, { useRef } from 'react'\nimport FixedFooter from './components/FixedFooter'\nimport MainContent, { MainContentAction } from './components/MainContent'\nimport { useGlobalData } from './provider/data'\n\nconst TranslatePage: React.FC = () => {\n  const mainContentRef = useRef<MainContentAction>()\n  const { noEnLangs } = useGlobalData()\n  // 导出\n  const doExport = () => {\n    mainContentRef.current.exportZip()\n  }\n\n  return (\n    <div style={{ minHeight: 'calc(100vh - 64px)', paddingBottom: '84px' }}>\n      <MainContent actionRef={mainContentRef} />\n      <FixedFooter langs={noEnLangs} onExport={doExport} />\n    </div>\n  )\n}\n\nexport default TranslatePage\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport DefaultLayout from './layout/DefaultLayout'\nimport App from './App'\n\nimport 'tailwindcss/tailwind.css'\nimport './styles/index.css'\n\nReactDOM.render(<DefaultLayout><App /></DefaultLayout>, document.getElementById('root'))\n"],"sourceRoot":""}